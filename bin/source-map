#!/usr/bin/env node
"use strict";

const {readFileSync} = require("fs");

let input = JSON.parse(readFileSync(process.argv.slice(2)[0], "utf8"));
input = parseMappings(input);
console.log(input);


/**
 * Extract and expand a list of mappings from V3 source-map data.
 *
 * @example <caption>Structure of returned object</caption>
 *    let map = JSON.parse(fs.readFileSync("bar.js.map"));
 *    expandMappings(map) => [{
 *       {input:  {line: 0, column: 0, file: "foo.js"}},
 *       {output: {line: 0, column: 0, file: "bar.js"}},
 *    },{
 *       {input:  {line: 2, column: 5, file: "foo.js"}},
 *       {output: {line: 2, column: 8, file: "bar.js"}},
 *    }];
 * @param {Object} map
 * @return {Object[]}
 * @internal
 */
function parseMappings(map){
	const mappings = [];
	let inputLine, inputColumn, inputFile, outputLine = 0, outputColumn, outputFile;
	for(const mapping of map.mappings.split(";")){
		for(const segment of mapping.split(",")){
			if(segment){
				const data   = vlqDecode(segment);
				inputLine    = null == inputLine    ? data[2] : inputLine    + data[2];
				inputColumn  = null == inputColumn  ? data[3] : inputColumn  + data[3];
				inputFile    = null == inputFile    ? data[1] : inputFile    + data[1];
				outputColumn = null == outputColumn ? data[0] : outputColumn + data[0];
				mappings.push({
					input:  {line: inputLine,  column: inputColumn,  file: map.sources[inputFile]},
					output: {line: outputLine, column: outputColumn, file: map.file},
				});
			}
		}
		++outputLine;
		outputColumn = 0;
	}
	return mappings;
}


/**
 * Decode a base64-encoded variable-length quantity.
 *
 * @example vlqDecode("8Egkh9BwM8EA") == [78, 1000000, 200, 78, 0];
 * @param {String} input
 * @return {Number[]}
 */
function vlqDecode(input){
	const codex = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	const values = [];
	const {length} = input;
	let more, shift = 0, value = 0;
	for(let i = 0; i < length; ++i){
		let byte = codex.indexOf(input[i]);
		if(-1 === byte)
			throw new Error("Bad character: " + input[i]);
		more   =  byte & 32;
		value += (byte & 31) << shift;
		if(more)
			shift += 5;
		else{
			const negated = value & 1;
			value >>= 1;
			values.push(negated ? value ? -value : -0x80000000 : value);
			more = shift = value = 0;
		}
	}
	return values;
}


/**
 * Encode an integer as a base64-encoded variable-length quantity.
 *
 * @example vlqEncode(0x1FFFFF) == "+///D";
 * @param {Number} input
 * @return {String}
 */
function vlqEncode(input){
	const codex = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	let encoded = "";
	input = input < 0 ? (-input << 1) | 1 : (input << 1);
	do{
		let value = input & 31;
		if(input >>>= 5) value |= 32;
		encoded += codex[value];
	} while(input > 0);
	return encoded;
}
